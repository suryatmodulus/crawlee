"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7573],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),g=p(n),m=r,c=g["".concat(s,".").concat(m)]||g[m]||d[m]||o;return n?a.createElement(c,l(l({ref:t},u),{},{components:n})):a.createElement(c,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2205:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>i,toc:()=>p});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={},s=void 0,p=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Launching multiple browsers",id:"launching-multiple-browsers",level:2},{value:"Features",id:"features",level:2},{value:"Simple configuration",id:"simple-configuration",level:3},{value:"Proxy management",id:"proxy-management",level:3},{value:"Lifecycle management with hooks",id:"lifecycle-management-with-hooks",level:3},{value:"Single API for common operations",id:"single-api-for-common-operations",level:3},{value:"Graceful browser closing",id:"graceful-browser-closing",level:3},{value:"Changing browser fingerprints a.k.a. browser signatures",id:"changing-browser-fingerprints-aka-browser-signatures",level:3},{value:"(UNSTABLE) Extensibility with plugins",id:"unstable-extensibility-with-plugins",level:3},{value:"API Reference",id:"api-reference",level:2},{value:"@crawlee/browser-pool",id:"crawleebrowser-pool",level:3},{value:"BrowserPool",id:"browserpool",level:3},{value:"<code>new BrowserPool(options)</code>",id:"new-browserpooloptions",level:4},{value:"<code>browserPool.newPage(options)</code> \u21d2 <code>Promise.&lt;Page&gt;</code>",id:"browserpoolnewpageoptions--promisepage",level:4},{value:"<code>browserPool.newPageInNewBrowser(options)</code> \u21d2 <code>Promise.&lt;Page&gt;</code>",id:"browserpoolnewpageinnewbrowseroptions--promisepage",level:4},{value:"<code>browserPool.newPageWithEachPlugin(optionsList)</code> \u21d2 <code>Promise.&lt;Array.&lt;Page&gt;&gt;</code>",id:"browserpoolnewpagewitheachpluginoptionslist--promisearraypage",level:4},{value:"<code>browserPool.getBrowserControllerByPage(page)</code> \u21d2 <code>BrowserController</code>",id:"browserpoolgetbrowsercontrollerbypagepage--codebrowsercontrollercode",level:4},{value:"<code>browserPool.getPage(id)</code> \u21d2 <code>Page</code>",id:"browserpoolgetpageid--page",level:4},{value:"<code>browserPool.getPageId(page)</code> \u21d2 <code>string</code>",id:"browserpoolgetpageidpage--string",level:4},{value:"<code>browserPool.retireBrowserController(browserController)</code>",id:"browserpoolretirebrowsercontrollerbrowsercontroller",level:4},{value:"<code>browserPool.retireBrowserByPage(page)</code>",id:"browserpoolretirebrowserbypagepage",level:4},{value:"<code>browserPool.retireAllBrowsers()</code>",id:"browserpoolretireallbrowsers",level:4},{value:"<code>browserPool.closeAllBrowsers()</code> \u21d2 <code>Promise.&lt;void&gt;</code>",id:"browserpoolcloseallbrowsers--promisevoid",level:4},{value:"<code>browserPool.destroy()</code> \u21d2 <code>Promise.&lt;void&gt;</code>",id:"browserpooldestroy--promisevoid",level:4},{value:"BrowserController",id:"browsercontroller",level:3},{value:"<code>browserController.close()</code> \u21d2 <code>Promise.&lt;void&gt;</code>",id:"browsercontrollerclose--promisevoid",level:4},{value:"<code>browserController.kill()</code> \u21d2 <code>Promise.&lt;void&gt;</code>",id:"browsercontrollerkill--promisevoid",level:4},{value:"<code>browserController.setCookies(page, cookies)</code> \u21d2 <code>Promise.&lt;void&gt;</code>",id:"browsercontrollersetcookiespage-cookies--promisevoid",level:4},{value:"<code>browserController.getCookies(page)</code> \u21d2 <code>Promise.&lt;Array.&lt;object&gt;&gt;</code>",id:"browsercontrollergetcookiespage--promisearrayobject",level:4},{value:"BrowserPlugin",id:"browserplugin",level:3},{value:"<code>new BrowserPlugin(library, [options])</code>",id:"new-browserpluginlibrary-options",level:4},{value:"LaunchContext",id:"launchcontext",level:3},{value:"<code>launchContext.proxyUrl</code>",id:"launchcontextproxyurl",level:4},{value:"<code>launchContext.proxyUrl</code> \u21d2 <code>string</code>",id:"launchcontextproxyurl--string",level:4},{value:"<code>launchContext.extend(fields)</code>",id:"launchcontextextendfields",level:4}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Browser Pool is a small, but powerful and extensible library, that allows you to seamlessly\ncontrol multiple headless browsers at the same time with only a little configuration, and a\nsingle function call. Currently, it supports ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/puppeteer/puppeteer"},"Puppeteer"),",\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/playwright"},"Playwright"),", and it can be easily extended with plugins."),(0,o.kt)("p",null,"We created Browser Pool because we regularly needed to execute tasks concurrently in many\nheadless browsers and their pages, but we did not want to worry about launching browsers, closing\nbrowsers, restarting them after crashes and so on. We also wanted to easily and reliably manage\nthe whole browser / page lifecycle."),(0,o.kt)("p",null,"You can use Browser Pool for scraping the internet at scale, testing your website\nin multiple browsers at the same time or launching web automation robots."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#installation"},"Installation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#usage"},"Usage")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#launching-multiple-browsers"},"Launching multiple browsers")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#features"},"Features"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#simple-configuration"},"Simple configuration")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#proxy-management"},"Proxy management")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#lifecycle-management-with-hooks"},"Lifecycle management with hooks")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#manipulating-playwright-context-using-pageoptions-or-launchoptions"},"Manipulating playwright context using ",(0,o.kt)("inlineCode",{parentName:"a"},"pageOptions")," or ",(0,o.kt)("inlineCode",{parentName:"a"},"launchOptions"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#single-api-for-common-operations"},"Single API for common operations")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#graceful-browser-closing"},"Graceful browser closing")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#changing-browser-fingerprints-aka-browser-signatures"},"Changing browser fingerprints a.k.a. browser signatures")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#unstable-extensibility-with-plugins"},"(UNSTABLE) Extensibility with plugins")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#api-reference"},"API Reference"))),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Use NPM or Yarn to install ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool"),". Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool")," does not come preinstalled\nwith browser automation libraries. This allows you to choose your own libraries and their\nversions, and it also makes ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool")," much smaller."),(0,o.kt)("p",null,"Run this command to install ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"playwright")," browser automation library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @crawlee/browser-pool playwright\n")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"This simple example shows how to open a page in a browser using Browser Pool.\nWe use the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"PlaywrightPlugin")," to wrap a Playwright installation of\nyour own. By calling ",(0,o.kt)("inlineCode",{parentName:"p"},"browserPool.newPage()")," you launch a new Firefox browser\nand open a new page in that browser."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BrowserPool, PlaywrightPlugin } from '@crawlee/browser-pool';\nimport playwright from 'playwright';\n\nconst browserPool = new BrowserPool({\n    browserPlugins: [new PlaywrightPlugin(playwright.chromium)],\n});\n\n// An asynchronous IIFE (immediately invoked function expression)\n// allows us to use the 'await' keyword.\n(async () => {\n    // Launches Chromium with Playwright and returns a Playwright Page.\n    const page1 = await browserPool.newPage();\n    // You can interact with the page as you're used to.\n    await page1.goto('https://example.com');\n    // When you're done, close the page.\n    await page1.close();\n\n    // Opens a second page in the same browser.\n    const page2 = await browserPool.newPage();\n    // When everything's finished, tear down the pool.\n    await browserPool.destroy();\n})();\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Browser Pool uses the same asynchronous API as the underlying automation libraries which means\nextensive use of Promises and the ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," / ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," pattern. ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await"},"Visit MDN to learn more"),".")),(0,o.kt)("h2",{id:"launching-multiple-browsers"},"Launching multiple browsers"),(0,o.kt)("p",null,"The basic example shows how to launch a single browser, but the purpose\nof Browser Pool is to launch many browsers. This is done automatically\nin the background. You only need to provide the relevant plugins and call\n",(0,o.kt)("inlineCode",{parentName:"p"},"browserPool.newPage()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BrowserPool, PlaywrightPlugin } from '@crawlee/browser-pool';\nimport playwright from 'playwright';\n\nconst browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(playwright.chromium),\n        new PlaywrightPlugin(playwright.firefox),\n        new PlaywrightPlugin(playwright.webkit),\n    ],\n});\n\n(async () => {\n    // Open 4 pages in 3 browsers. The browsers are launched\n    // in a round-robin fashion based on the plugin order.\n    const chromiumPage = await browserPool.newPage();\n    const firefoxPage = await browserPool.newPage();\n    const webkitPage = await browserPool.newPage();\n    const chromiumPage2 = await browserPool.newPage();\n\n    // Don't forget to close pages / destroy pool when you're done.\n})();\n")),(0,o.kt)("p",null,"This round-robin way of opening pages may not be useful for you,\nif you need to consistently run tasks in multiple environments.\nFor that, there's the ",(0,o.kt)("inlineCode",{parentName:"p"},"newPageWithEachPlugin")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BrowserPool, PlaywrightPlugin, PuppeteerPlugin } from '@crawlee/browser-pool';\nimport playwright from 'playwright';\nimport puppeteer from 'puppeteer';\n\nconst browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(playwright.chromium),\n        new PuppeteerPlugin(puppeteer),\n    ],\n});\n\n(async () => {\n    const pages = await browserPool.newPageWithEachPlugin();\n    const promises = pages.map(async page => {\n        // Run some task with each page\n        // pages are in order of plugins:\n        // [playwrightPage, puppeteerPage]\n        await page.close();\n    });\n    await Promise.all(promises);\n\n    // Continue with some more work.\n})();\n")),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("p",null,"Besides a simple interface for launching browsers, Browser Pool includes\nother helpful features that make browser management more convenient."),(0,o.kt)("h3",{id:"simple-configuration"},"Simple configuration"),(0,o.kt)("p",null,"You can easily set the maximum number of pages that can be open in a given\nbrowser and also the maximum number of pages to process before a browser\n",(0,o.kt)("a",{parentName:"p",href:"#graceful-browser-closing"},"is retired"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const browserPool = new BrowserPool({\n    maxOpenPagesPerBrowser: 20,\n    retireBrowserAfterPageCount: 100,\n});\n")),(0,o.kt)("p",null,"You can configure the browser launch options either right in the plugins:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const playwrightPlugin = new PlaywrightPlugin(playwright.chromium, {\n    launchOptions: {\n        headless: true,\n    }\n})\n")),(0,o.kt)("p",null,"Or dynamically in ",(0,o.kt)("a",{parentName:"p",href:"#lifecycle-management-with-hooks"},"pre-launch hooks"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const browserPool = new BrowserPool({\n    preLaunchHooks: [(pageId, launchContext) => {\n        if (pageId === 'headful') {\n            launchContext.launchOptions.headless = false;\n        }\n    }]\n});\n")),(0,o.kt)("h3",{id:"proxy-management"},"Proxy management"),(0,o.kt)("p",null,"When scraping at scale or testing websites from multiple geolocations,\none often needs to use proxy servers. Setting up an authenticated proxy\nin Puppeteer can be cumbersome, so we created a helper that does all\nthe heavy lifting for you. Simply provide a proxy URL with authentication\ncredentials, and you're done. It works the same for Playwright too."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const puppeteerPlugin = new PuppeteerPlugin(puppeteer, {\n    proxyUrl: 'http://<username>:<password>@proxy.com:8000'\n});\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"We plan to extend this by adding a proxy-per-page functionality,\nallowing you to rotate proxies per page, rather than per browser.")),(0,o.kt)("h3",{id:"lifecycle-management-with-hooks"},"Lifecycle management with hooks"),(0,o.kt)("p",null,"Browser Pool allows you to manage the full browser / page lifecycle\nby attaching hooks to the most important events. Asynchronous hooks\nare supported, and their execution order is guaranteed."),(0,o.kt)("p",null,"The first parameter of each hook is either a ",(0,o.kt)("inlineCode",{parentName:"p"},"pageId")," for the hooks\nexecuted before a ",(0,o.kt)("inlineCode",{parentName:"p"},"page")," is created or a ",(0,o.kt)("inlineCode",{parentName:"p"},"page")," afterwards. This is\nuseful to keep track of which hook was triggered by which ",(0,o.kt)("inlineCode",{parentName:"p"},"newPage()"),"\ncall."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(playwright.chromium),\n    ],\n    preLaunchHooks: [(pageId, launchContext) => {\n        // You can use pre-launch hooks to make dynamic changes\n        // to the launchContext, such as changing a proxyUrl\n        // or updating the browser launchOptions\n\n        pageId === 'my-page' // true\n    }],\n    postPageCreateHooks: [(page, browserController) => {\n        // It makes sense to make global changes to pages\n        // in post-page-create hooks. For example, you can\n        // inject some JavaScript library, such as jQuery.\n\n        browserPool.getPageId(page) === 'my-page' // true\n    }]\n});\n\nawait browserPool.newPage({ id: 'my-page' });\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"See the API Documentation for all hooks and their arguments."),(0,o.kt)("h3",{parentName:"blockquote",id:"manipulating-playwright-context-using-pageoptions-or-launchoptions"},"Manipulating playwright context using ",(0,o.kt)("inlineCode",{parentName:"h3"},"pageOptions")," or ",(0,o.kt)("inlineCode",{parentName:"h3"},"launchOptions")),(0,o.kt)("p",{parentName:"blockquote"},"Playwright allows customizing multiple browser attributes by browser context.\nYou can customize some of them once the context is created, but some need to be customized within its creation.\nThis part of the documentation should explain how you can effectively customize the browser context.")),(0,o.kt)("p",null,"First of all, let's take a look at what kind of context strategy you chose. You can choose between two strategies by ",(0,o.kt)("inlineCode",{parentName:"p"},"useIncognitoPages")," ",(0,o.kt)("inlineCode",{parentName:"p"},"LaunchContext")," option."),(0,o.kt)("p",null,"Suppose you decide to keep ",(0,o.kt)("inlineCode",{parentName:"p"},"useIncognitoPages")," default ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," and create a shared context across all pages launched by one browser. In this case,  you should pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"contextOptions")," as a ",(0,o.kt)("inlineCode",{parentName:"p"},"launchOptions")," since the context is created within the new browser launch. The ",(0,o.kt)("inlineCode",{parentName:"p"},"launchOptions")," corresponds to these ",(0,o.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/api/class-browsertype#browsertypelaunchpersistentcontextuserdatadir-options"},"playwright options"),". As you can see, these options contain not only ordinary playwright launch options but also the context options."),(0,o.kt)("p",null,"If you set ",(0,o.kt)("inlineCode",{parentName:"p"},"useIncognitoPages")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", you will create a new context within each new page, which allows you to handle each page its cookies and application data. This approach allows you to pass the context options as ",(0,o.kt)("inlineCode",{parentName:"p"},"pageOptions")," because a new context is created once you create a new page. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"pageOptions")," corresponds to these ",(0,o.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/api/class-browser#browsernewpageoptions"},"playwright options"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Changing context options with ",(0,o.kt)("inlineCode",{parentName:"strong"},"LaunchContext"),":")),(0,o.kt)("p",null,"This will only work if you keep the default value for ",(0,o.kt)("inlineCode",{parentName:"p"},"useIncognitoPages")," (",(0,o.kt)("inlineCode",{parentName:"p"},"false"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(\n            playwright.chromium,\n            {\n                launchOptions: {\n                    deviceScaleFactor: 2,\n                },\n            },\n        ),\n    ],\n\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Changing context options with ",(0,o.kt)("inlineCode",{parentName:"strong"},"browserPool.newPage")," options:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const browserPool = new BrowserPool({\n     browserPlugins: [\n        new PlaywrightPlugin(\n            playwright.chromium,\n            {\n                useIncognitoPages: true, // You must turn on incognito pages.\n                launchOptions: {\n                    // launch options\n                    headless: false,\n                    devtools: true,\n                },\n            },\n        ),\n    ],\n});\n\n(async () => {\n    // Launches Chromium with Playwright and returns a Playwright Page.\n    const page = await browserPool.newPage({\n        pageOptions: {\n            // context options\n            deviceScaleFactor: 2,\n            colorScheme: 'light',\n            locale: 'de-DE',\n        },\n    });\n})();\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Changing context options with ",(0,o.kt)("inlineCode",{parentName:"strong"},"prePageCreateHooks")," options:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(\n            playwright.chromium,\n            {\n                useIncognitoPages: true,\n                launchOptions: {\n                // launch options\n                    headless: false,\n                    devtools: true,\n                },\n            },\n        ),\n    ],\n    prePageCreateHooks: [\n        (pageId, browserController, pageOptions) => {\n            pageOptions.deviceScaleFactor = 2;\n            pageOptions.colorScheme = 'dark';\n            pageOptions.locale = 'de-DE';\n\n            // You must modify the 'pageOptions' object, not assign to the variable.\n            // pageOptions = {deviceScaleFactor: 2, ...etc} => This will not work!\n        },\n    ],\n});\n\n(async () => {\n    // Launches Chromium with Playwright and returns a Playwright Page.\n    const page = await browserPool.newPage();\n})();\n")),(0,o.kt)("h3",{id:"single-api-for-common-operations"},"Single API for common operations"),(0,o.kt)("p",null,"Puppeteer and Playwright handle some things differently. Browser Pool\nattempts to remove those differences for the most common use-cases."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Playwright\nconst cookies = await context.cookies();\nawait context.addCookies(cookies);\n\n// Puppeteer\nconst cookies = await page.cookies();\nawait page.setCookie(...cookies);\n\n// BrowserPool uses the same API for all plugins\nconst cookies = await browserController.getCookies(page);\nawait browserController.setCookies(page, cookies);\n")),(0,o.kt)("h3",{id:"graceful-browser-closing"},"Graceful browser closing"),(0,o.kt)("p",null,"With Browser Pool, browsers are not closed, but retired. A retired browser\nwill no longer open new pages, but it will wait until the open pages are closed,\nallowing your running tasks to finish. If a browser gets stuck in limbo,\nit will be killed after a timeout to prevent hanging browser processes."),(0,o.kt)("h3",{id:"changing-browser-fingerprints-aka-browser-signatures"},"Changing browser fingerprints a.k.a. browser signatures"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Fingerprints are enabled by default since v3.")),(0,o.kt)("p",null,"Changing browser fingerprints is beneficial for avoiding getting blocked and simulating real user browsers.\nWith Browser Pool, you can do this otherwise complicated technique by enabling the ",(0,o.kt)("inlineCode",{parentName:"p"},"useFingerprints")," option.\nThe fingerprints are by default tied to the respective proxy urls to not use the same unique fingerprint from various IP addresses.\nYou can disable this behavior in the ",(0,o.kt)("a",{parentName:"p",href:"#new_BrowserPool_new"},(0,o.kt)("inlineCode",{parentName:"a"},"fingerprintOptions")),". In the ",(0,o.kt)("inlineCode",{parentName:"p"},"fingerprintOptions"),", You can also control which fingerprints are generated.\nYou can control parameters as browser, operating system, and browser versions."),(0,o.kt)("h3",{id:"unstable-extensibility-with-plugins"},"(UNSTABLE) Extensibility with plugins"),(0,o.kt)("p",null,"A new super cool browser automation library appears? No problem, we add\na simple plugin to Browser Pool, and it automagically works."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The BrowserPlugin and BrowserController interfaces are unstable and may\nchange if we find some implementation to be suboptimal.")),(0,o.kt)("h2",{id:"api-reference"},"API Reference"),(0,o.kt)("p",null,"All public classes, methods and their parameters can be inspected in this API reference."),(0,o.kt)("a",{name:"module_browser-pool"}),(0,o.kt)("h3",{id:"crawleebrowser-pool"},"@crawlee/browser-pool"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool")," module exports three constructors. One for ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPool"),"\nitself and two for the included Puppeteer and Playwright plugins."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BrowserPool, PuppeteerPlugin, PlaywrightPlugin } from '@crawlee/browser-pool';\nimport puppeteer from 'puppeteer';\nimport playwright from 'playwright';\n\nconst browserPool = new BrowserPool({\n    browserPlugins: [\n        new PuppeteerPlugin(puppeteer),\n        new PlaywrightPlugin(playwright.chromium),\n    ]\n});\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Properties")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"BrowserPool"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPool"},(0,o.kt)("code",null,"BrowserPool")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PuppeteerPlugin"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"PuppeteerPlugin"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"PlaywrightPlugin"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"PlaywrightPlugin"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool"}),(0,o.kt)("h3",{id:"browserpool"},"BrowserPool"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPool")," class is the most important class of the ",(0,o.kt)("inlineCode",{parentName:"p"},"@crawlee/browser-pool")," module.\nIt manages opening and closing of browsers and their pages and its constructor\noptions allow easy configuration of the browsers' and pages' lifecycle."),(0,o.kt)("p",null,"The most important and useful constructor options are the various lifecycle hooks.\nThose allow you to sequentially call a list of (asynchronous) functions at each\nstage of the browser / page lifecycle."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { BrowserPool, PlaywrightPlugin } from '@crawlee/browser-pool';\nimport playwright from 'playwright';\n\nconst browserPool = new BrowserPool({\n    browserPlugins: [ new PlaywrightPlugin(playwright.chromium)],\n    preLaunchHooks: [(pageId, launchContext) => {\n        // do something before a browser gets launched\n        launchContext.launchOptions.headless = false;\n    }],\n    postLaunchHooks: [(pageId, browserController) => {\n        // manipulate the browser right after launch\n        console.dir(browserController.browser.contexts());\n    }],\n    prePageCreateHooks: [(pageId, browserController) => {\n        if (pageId === 'my-page') {\n            // make changes right before a specific page is created\n        }\n    }],\n    postPageCreateHooks: [async (page, browserController) => {\n        // update some or all new pages\n        await page.evaluate(() => {\n            // now all pages will have 'foo'\n            window.foo = 'bar'\n        })\n    }],\n    prePageCloseHooks: [async (page, browserController) => {\n        // collect information just before a page closes\n        await page.screenshot();\n    }],\n    postPageCloseHooks: [(pageId, browserController) => {\n        // clean up or log after a job is done\n        console.log('Page closed: ', pageId)\n    }]\n});\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool"},"BrowserPool"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#new_BrowserPool_new"},(0,o.kt)("inlineCode",{parentName:"a"},"new BrowserPool(options)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+newPage"},(0,o.kt)("inlineCode",{parentName:"a"},".newPage(options)"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Page",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+newPageInNewBrowser"},(0,o.kt)("inlineCode",{parentName:"a"},".newPageInNewBrowser(options)"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Page",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+newPageWithEachPlugin"},(0,o.kt)("inlineCode",{parentName:"a"},".newPageWithEachPlugin(optionsList)"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Array.","<","Page",">",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+getBrowserControllerByPage"},(0,o.kt)("inlineCode",{parentName:"a"},".getBrowserControllerByPage(page)"))," \u21d2 ",(0,o.kt)("a",{parentName:"li",href:"#BrowserController"},(0,o.kt)("code",null,"BrowserController"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+getPage"},(0,o.kt)("inlineCode",{parentName:"a"},".getPage(id)"))," \u21d2 ",(0,o.kt)("code",null,"Page")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+getPageId"},(0,o.kt)("inlineCode",{parentName:"a"},".getPageId(page)"))," \u21d2 ",(0,o.kt)("code",null,"string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+retireBrowserController"},(0,o.kt)("inlineCode",{parentName:"a"},".retireBrowserController(browserController)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+retireBrowserByPage"},(0,o.kt)("inlineCode",{parentName:"a"},".retireBrowserByPage(page)"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+retireAllBrowsers"},(0,o.kt)("inlineCode",{parentName:"a"},".retireAllBrowsers()"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+closeAllBrowsers"},(0,o.kt)("inlineCode",{parentName:"a"},".closeAllBrowsers()"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserPool+destroy"},(0,o.kt)("inlineCode",{parentName:"a"},".destroy()"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"new_BrowserPool_new"}),(0,o.kt)("h4",{id:"new-browserpooloptions"},(0,o.kt)("inlineCode",{parentName:"h4"},"new BrowserPool(options)")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options.browserPlugins"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPlugin"},(0,o.kt)("code",null,"Array.","<","BrowserPlugin",">"))),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Browser plugins are wrappers of browser automation libraries that  allow ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPool")," to control browsers with those libraries.  ",(0,o.kt)("inlineCode",{parentName:"td"},"@crawlee/browser-pool")," comes with a ",(0,o.kt)("inlineCode",{parentName:"td"},"PuppeteerPlugin")," and a ",(0,o.kt)("inlineCode",{parentName:"td"},"PlaywrightPlugin"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.maxOpenPagesPerBrowser]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"20")),(0,o.kt)("td",{parentName:"tr",align:null},"Sets the maximum number of pages that can be open in a browser at the  same time. Once reached, a new browser will be launched to handle the excess.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.retireBrowserAfterPageCount]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"100")),(0,o.kt)("td",{parentName:"tr",align:null},"Browsers tend to get bloated after processing a lot of pages. This option  configures the number of processed pages after which the browser will  automatically retire and close. A new browser will launch in its place.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.operationTimeoutSecs]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"15")),(0,o.kt)("td",{parentName:"tr",align:null},"As we know from experience, async operations of the underlying libraries,  such as launching a browser or opening a new page, can get stuck.  To prevent ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPool")," from getting stuck, we add a timeout  to those operations and you can configure it with this option.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.closeInactiveBrowserAfterSecs]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"300")),(0,o.kt)("td",{parentName:"tr",align:null},"Browsers normally close immediately after their last page is processed.  However, there could be situations where this does not happen. Browser Pool  makes sure all inactive browsers are closed regularly, to free resources.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.preLaunchHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Pre-launch hooks are executed just before a browser is launched and provide  a good opportunity to dynamically change the launch options.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"pageId"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"string")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"launchContext"),": ",(0,o.kt)("a",{parentName:"td",href:"#LaunchContext"},"LaunchContext"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.postLaunchHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Post-launch hooks are executed as soon as a browser is launched.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"pageId"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"string")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"browserController"),": ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController"),"  To guarantee order of execution before other hooks in the same browser,  the ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController")," methods cannot be used until the post-launch  hooks complete. If you attempt to call ",(0,o.kt)("inlineCode",{parentName:"td"},"await browserController.close()")," from  a post-launch hook, it will deadlock the process. This API is subject to change.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.prePageCreateHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Pre-page-create hooks are executed just before a new page is created. They  are useful to make dynamic changes to the browser before opening a page.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"pageId"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"string"),", ",(0,o.kt)("inlineCode",{parentName:"td"},"browserController"),": ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController")," and  ",(0,o.kt)("inlineCode",{parentName:"td"},"pageOptions"),": `object")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.postPageCreateHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Post-page-create hooks are called right after a new page is created  and all internal actions of Browser Pool are completed. This is the  place to make changes to a page that you would like to apply to all  pages. Such as injecting a JavaScript library into all pages.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"page"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"Page")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"browserController"),": ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.prePageCloseHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Pre-page-close hooks give you the opportunity to make last second changes  in a page that's about to be closed, such as saving a snapshot or updating  state.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"page"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"Page")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"browserController"),": ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.postPageCloseHooks]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","function()",">")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Post-page-close hooks allow you to do page related clean up.  The hooks are called with two arguments:  ",(0,o.kt)("inlineCode",{parentName:"td"},"pageId"),": ",(0,o.kt)("inlineCode",{parentName:"td"},"string")," and ",(0,o.kt)("inlineCode",{parentName:"td"},"browserController"),": ",(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},"BrowserController"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.useFingerprints]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"false")),(0,o.kt)("td",{parentName:"tr",align:null},"If true the Browser pool will automatically generate and inject fingerprints to browsers.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.fingerprintOptions]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"FingerprintOptions ")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Fingerprints options that allows customizing the fingerprinting behavior.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.fingerprintOptions.fingerprintGeneratorOptions]"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"See the ",(0,o.kt)("a",{parentName:"td",href:"https://github.com/apify/fingerprint-generator#headergeneratoroptions"},"Fingerprint generator")," documentation.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.fingerprintOptions.useFingerprintCache]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"true")),(0,o.kt)("td",{parentName:"tr",align:null},"Fingerprints are automatically assigned to an instance of a Session or proxy URL. You can disable this behavior by setting this property to ",(0,o.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.fingerprintOptions.fingerprintCacheSize]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"number")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"10000")),(0,o.kt)("td",{parentName:"tr",align:null},"Maximum number of cached browser fingerprints.")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+newPage"}),(0,o.kt)("h4",{id:"browserpoolnewpageoptions--promisepage"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.newPage(options)")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Page",">")),(0,o.kt)("p",null,"Opens a new page in one of the running browsers or launches\na new browser and opens a page there, if no browsers are active,\nor their page limits have been exceeded."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.id]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string")),(0,o.kt)("td",{parentName:"tr",align:null},"Assign a custom ID to the page. If you don't a random string ID  will be generated.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.pageOptions]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Some libraries (Playwright) allow you to open new pages with specific  options. Use this property to set those options.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.browserPlugin]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPlugin"},(0,o.kt)("code",null,"BrowserPlugin"))),(0,o.kt)("td",{parentName:"tr",align:null},"Choose a plugin to open the page with. If none is provided,  one of the pool's available plugins will be used.  It must be one of the plugins browser pool was created with.  If you wish to start a browser with a different configuration,  see the ",(0,o.kt)("inlineCode",{parentName:"td"},"newPageInNewBrowser")," function.")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+newPageInNewBrowser"}),(0,o.kt)("h4",{id:"browserpoolnewpageinnewbrowseroptions--promisepage"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.newPageInNewBrowser(options)")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Page",">")),(0,o.kt)("p",null,"Unlike ",(0,o.kt)("a",{parentName:"p",href:"#BrowserPool+newPage"},"newPage"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"newPageInNewBrowser")," always launches a new\nbrowser to open the page in. Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"launchOptions")," option to\nconfigure the new browser."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"options"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.id]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string")),(0,o.kt)("td",{parentName:"tr",align:null},"Assign a custom ID to the page. If you don't a random string ID  will be generated.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.pageOptions]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Some libraries (Playwright) allow you to open new pages with specific  options. Use this property to set those options.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.launchOptions]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Options that will be used to launch the new browser.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.browserPlugin]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPlugin"},(0,o.kt)("code",null,"BrowserPlugin"))),(0,o.kt)("td",{parentName:"tr",align:null},"Provide a plugin to launch the browser. If none is provided,  one of the pool's available plugins will be used.  If you configured ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPool")," to rotate multiple libraries,  such as both Puppeteer and Playwright, you should always set  the ",(0,o.kt)("inlineCode",{parentName:"td"},"browserPlugin")," when using the ",(0,o.kt)("inlineCode",{parentName:"td"},"launchOptions")," option.  The plugin will not be added to the list of plugins used by  the pool. You can either use one of those, to launch a specific  browser, or provide a completely new configuration.")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+newPageWithEachPlugin"}),(0,o.kt)("h4",{id:"browserpoolnewpagewitheachpluginoptionslist--promisearraypage"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.newPageWithEachPlugin(optionsList)")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Array.","<","Page",">",">")),(0,o.kt)("p",null,"Opens new pages with all available plugins and returns an array\nof pages in the same order as the plugins were provided to ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPool"),".\nThis is useful when you want to run a script in multiple environments\nat the same time, typically in testing or website analysis."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const browserPool = new BrowserPool({\n    browserPlugins: [\n        new PlaywrightPlugin(playwright.chromium),\n        new PlaywrightPlugin(playwright.firefox),\n        new PlaywrightPlugin(playwright.webkit),\n        new PuppeteerPlugin(puppeteer),\n    ]\n});\n\nconst pages = await browserPool.newPageWithEachPlugin();\nconst [chromiumPage, firefoxPage, webkitPage, puppeteerPage] = pages;\n")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"optionsList"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","object",">"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+getBrowserControllerByPage"}),(0,o.kt)("h4",{id:"browserpoolgetbrowsercontrollerbypagepage--codebrowsercontrollercode"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.getBrowserControllerByPage(page)")," \u21d2 ",(0,o.kt)("a",{parentName:"h4",href:"#BrowserController"},(0,o.kt)("code",null,"BrowserController"))),(0,o.kt)("p",null,"Retrieves a ",(0,o.kt)("a",{parentName:"p",href:"#BrowserController"},"BrowserController")," for a given page. This is useful\nwhen you're working only with pages and need to access the browser\nmanipulation functionality."),(0,o.kt)("p",null,"You could access the browser directly from the page,\nbut that would circumvent ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPool")," and most likely\ncause weird things to happen, so please always use ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserController"),"\nto control your browsers. The function returns ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," if the\nbrowser is closed."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"page"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Page")),(0,o.kt)("td",{parentName:"tr",align:null},"Browser plugin page")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+getPage"}),(0,o.kt)("h4",{id:"browserpoolgetpageid--page"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.getPage(id)")," \u21d2 ",(0,o.kt)("code",null,"Page")),(0,o.kt)("p",null,"If you provided a custom ID to one of your pages or saved the\nrandomly generated one, you can use this function to retrieve\nthe page. If the page is no longer open, the function will\nreturn ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"id"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+getPageId"}),(0,o.kt)("h4",{id:"browserpoolgetpageidpage--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.getPageId(page)")," \u21d2 ",(0,o.kt)("code",null,"string")),(0,o.kt)("p",null,"Page IDs are used throughout ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPool")," as a method of linking\nevents. You can use a page ID to track the full lifecycle of the page.\nIt is created even before a browser is launched and stays with the page\nuntil it's closed."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"page"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Page"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+retireBrowserController"}),(0,o.kt)("h4",{id:"browserpoolretirebrowsercontrollerbrowsercontroller"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.retireBrowserController(browserController)")),(0,o.kt)("p",null,"Removes a browser controller from the pool. The underlying\nbrowser will be closed after all its pages are closed."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"browserController"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserController"},(0,o.kt)("code",null,"BrowserController")))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+retireBrowserByPage"}),(0,o.kt)("h4",{id:"browserpoolretirebrowserbypagepage"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.retireBrowserByPage(page)")),(0,o.kt)("p",null,"Removes a browser from the pool. It will be\nclosed after all its pages are closed."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"page"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Page"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+retireAllBrowsers"}),(0,o.kt)("h4",{id:"browserpoolretireallbrowsers"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.retireAllBrowsers()")),(0,o.kt)("p",null,"Removes all active browsers from the pool. The browsers will be\nclosed after all their pages are closed."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+closeAllBrowsers"}),(0,o.kt)("h4",{id:"browserpoolcloseallbrowsers--promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.closeAllBrowsers()")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("p",null,"Closes all managed browsers without waiting for pages to close."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPool+destroy"}),(0,o.kt)("h4",{id:"browserpooldestroy--promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserPool.destroy()")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("p",null,"Closes all managed browsers and tears down the pool."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserController"}),(0,o.kt)("h3",{id:"browsercontroller"},"BrowserController"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserController")," serves two purposes. First, it is the base class that\nspecialized controllers like ",(0,o.kt)("inlineCode",{parentName:"p"},"PuppeteerController")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"PlaywrightController"),"\nextend. Second, it defines the public interface of the specialized classes\nwhich provide only private methods. Therefore, we do not keep documentation\nfor the specialized classes, because it's the same for all of them."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Properties")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"id"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"browserPlugin"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPlugin"},(0,o.kt)("code",null,"BrowserPlugin"))),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPlugin")," instance used to launch the browser.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"browser"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Browser")),(0,o.kt)("td",{parentName:"tr",align:null},"Browser representation of the underlying automation library.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"launchContext"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#LaunchContext"},(0,o.kt)("code",null,"LaunchContext"))),(0,o.kt)("td",{parentName:"tr",align:null},"The configuration the browser was launched with.")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserController"},"BrowserController"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserController+close"},(0,o.kt)("inlineCode",{parentName:"a"},".close()"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserController+kill"},(0,o.kt)("inlineCode",{parentName:"a"},".kill()"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserController+setCookies"},(0,o.kt)("inlineCode",{parentName:"a"},".setCookies(page, cookies)"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#BrowserController+getCookies"},(0,o.kt)("inlineCode",{parentName:"a"},".getCookies(page)"))," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Array.","<","object",">",">"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserController+close"}),(0,o.kt)("h4",{id:"browsercontrollerclose--promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserController.close()")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("p",null,"Gracefully closes the browser and makes sure\nthere will be no lingering browser processes."),(0,o.kt)("p",null,"Emits 'browserClosed' event."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserController+kill"}),(0,o.kt)("h4",{id:"browsercontrollerkill--promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserController.kill()")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("p",null,"Immediately kills the browser process."),(0,o.kt)("p",null,"Emits 'browserClosed' event."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserController+setCookies"}),(0,o.kt)("h4",{id:"browsercontrollersetcookiespage-cookies--promisevoid"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserController.setCookies(page, cookies)")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","void",">")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"page"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Object"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cookies"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Array.","<","object",">"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserController+getCookies"}),(0,o.kt)("h4",{id:"browsercontrollergetcookiespage--promisearrayobject"},(0,o.kt)("inlineCode",{parentName:"h4"},"browserController.getCookies(page)")," \u21d2 ",(0,o.kt)("code",null,"Promise.","<","Array.","<","object",">",">")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"page"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"Object"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"BrowserPlugin"}),(0,o.kt)("h3",{id:"browserplugin"},"BrowserPlugin"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"BrowserPlugin")," serves two purposes. First, it is the base class that\nspecialized controllers like ",(0,o.kt)("inlineCode",{parentName:"p"},"PuppeteerPlugin")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"PlaywrightPlugin")," extend.\nSecond, it allows the user to configure the automation libraries and\nfeed them to ",(0,o.kt)("a",{parentName:"p",href:"#BrowserPool"},"BrowserPool")," for use."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Properties")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[useIncognitoPages]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"false")),(0,o.kt)("td",{parentName:"tr",align:null},"By default pages share the same browser context.  If set to true each page uses its own context that is destroyed once the page is closed or crashes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[userDataDir]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Path to a User Data Directory, which stores browser session data like cookies and local storage.")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"new_BrowserPlugin_new"}),(0,o.kt)("h4",{id:"new-browserpluginlibrary-options"},(0,o.kt)("inlineCode",{parentName:"h4"},"new BrowserPlugin(library, [options])")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"library"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Each plugin expects an instance of the object with the ",(0,o.kt)("inlineCode",{parentName:"td"},".launch()")," property.  For Puppeteer, it is the ",(0,o.kt)("inlineCode",{parentName:"td"},"puppeteer")," module itself, whereas for Playwright  it is one of the browser types, such as ",(0,o.kt)("inlineCode",{parentName:"td"},"puppeteer.chromium"),".  ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPlugin")," does not include the library. You can choose any version  or fork of the library. It also keeps ",(0,o.kt)("inlineCode",{parentName:"td"},"@crawlee/browser-pool")," installation small.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.launchOptions]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Options that will be passed down to the automation library. E.g.  ",(0,o.kt)("inlineCode",{parentName:"td"},"puppeteer.launch(launchOptions);"),". This is a good place to set  options that you want to apply as defaults. To dynamically override  those options per-browser, see the ",(0,o.kt)("inlineCode",{parentName:"td"},"preLaunchHooks")," of ",(0,o.kt)("a",{parentName:"td",href:"#BrowserPool"},"BrowserPool"),".")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[options.proxyUrl]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string")),(0,o.kt)("td",{parentName:"tr",align:null},"Automation libraries configure proxies differently. This helper allows you  to set a proxy URL without worrying about specific implementations.  It also allows you use an authenticated proxy without extra code.")))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"LaunchContext"}),(0,o.kt)("h3",{id:"launchcontext"},"LaunchContext"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"LaunchContext")," holds information about the launched browser. It's useful\nto retrieve the ",(0,o.kt)("inlineCode",{parentName:"p"},"launchOptions"),", the proxy the browser was launched with\nor any other information user chose to add to the ",(0,o.kt)("inlineCode",{parentName:"p"},"LaunchContext")," by calling\nits ",(0,o.kt)("inlineCode",{parentName:"p"},"extend")," function. This is very useful to keep track of browser-scoped\nvalues, such as session IDs."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Properties")),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"id"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string")),(0,o.kt)("td",{parentName:"tr",align:null},"To make identification of ",(0,o.kt)("inlineCode",{parentName:"td"},"LaunchContext")," easier, ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPool")," assigns  the ",(0,o.kt)("inlineCode",{parentName:"td"},"LaunchContext")," an ",(0,o.kt)("inlineCode",{parentName:"td"},"id")," that's equal to the ",(0,o.kt)("inlineCode",{parentName:"td"},"id")," of the page that  triggered the browser launch. This is useful, because many pages share  a single launch context (single browser).")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"browserPlugin"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"#BrowserPlugin"},(0,o.kt)("code",null,"BrowserPlugin"))),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("inlineCode",{parentName:"td"},"BrowserPlugin")," instance used to launch the browser.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"launchOptions"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"The actual options the browser was launched with, after changes.  Those changes would be typically made in pre-launch hooks.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[useIncognitoPages]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"boolean")),(0,o.kt)("td",{parentName:"tr",align:null},"By default pages share the same browser context.  If set to true each page uses its own context that is destroyed once the page is closed or crashes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"[userDataDir]"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object")),(0,o.kt)("td",{parentName:"tr",align:null},"Path to a User Data Directory, which stores browser session data like cookies and local storage.")))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#LaunchContext"},"LaunchContext"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#LaunchContext+proxyUrl"},(0,o.kt)("inlineCode",{parentName:"a"},".proxyUrl"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#LaunchContext+proxyUrl"},(0,o.kt)("inlineCode",{parentName:"a"},".proxyUrl"))," \u21d2 ",(0,o.kt)("code",null,"string")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#LaunchContext+extend"},(0,o.kt)("inlineCode",{parentName:"a"},".extend(fields)")))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"LaunchContext+proxyUrl"}),(0,o.kt)("h4",{id:"launchcontextproxyurl"},(0,o.kt)("inlineCode",{parentName:"h4"},"launchContext.proxyUrl")),(0,o.kt)("p",null,"Sets a proxy URL for the browser.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," to unset existing proxy URL."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"url"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"string"))))),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"LaunchContext+proxyUrl"}),(0,o.kt)("h4",{id:"launchcontextproxyurl--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"launchContext.proxyUrl")," \u21d2 ",(0,o.kt)("code",null,"string")),(0,o.kt)("p",null,"Returns the proxy URL of the browser."),(0,o.kt)("hr",null),(0,o.kt)("a",{name:"LaunchContext+extend"}),(0,o.kt)("h4",{id:"launchcontextextendfields"},(0,o.kt)("inlineCode",{parentName:"h4"},"launchContext.extend(fields)")),(0,o.kt)("p",null,"Extend the launch context with any extra fields.\nThis is useful to keep state information relevant\nto the browser being launched. It ensures that\nno internal fields are overridden and should be\nused instead of property assignment."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Param"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fields"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("code",null,"object"))))),(0,o.kt)("hr",null))}d.isMDXComponent=!0}}]);