"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9488],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),h=n,f=d["".concat(l,".").concat(h)]||d[h]||u[h]||s;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6783:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>u,frontMatter:()=>i,toc:()=>c});var a=r(7462),n=r(3366),s=(r(7294),r(3905)),o=["components"],i={},l=void 0,c=[{value:"Example usage",id:"example-usage",level:2}],p={toc:c};function u(e){var t=e.components,r=(0,n.Z)(e,o);return(0,s.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Provides a simple framework for parallel crawling of web pages. The URLs to crawl are fed either from a static list of URLs or from a dynamic queue of URLs enabling recursive crawling of websites."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"BasicCrawler")," is a low-level tool that requires the user to implement the page download and data extraction functionality themselves.\nIf we want a crawler that already facilitates this functionality, we should consider using ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/cheerio-crawler/class/CheerioCrawler"},"CheerioCrawler"),", ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/puppeteer-crawler/class/PuppeteerCrawler"},"PuppeteerCrawler")," or ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/playwright-crawler/class/PlaywrightCrawler"},"PlaywrightCrawler"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"BasicCrawler")," invokes the user-provided ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestHandler"},(0,s.kt)("inlineCode",{parentName:"a"},"requestHandler"))," for each ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/Request"},"Request")," object, which represents a single URL to crawl. The ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/Request"},"Request")," objects are fed from the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/RequestList"},"RequestList")," or ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/RequestQueue"},"RequestQueue")," instances provided by the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestList"},(0,s.kt)("inlineCode",{parentName:"a"},"requestList"))," or ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestQueue"},(0,s.kt)("inlineCode",{parentName:"a"},"requestQueue"))," constructor options, respectively. If neither ",(0,s.kt)("inlineCode",{parentName:"p"},"requestList")," nor ",(0,s.kt)("inlineCode",{parentName:"p"},"requestQueue")," options are provided, the crawler will open the default request queue either when the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/class/BasicCrawler#addRequests"},(0,s.kt)("inlineCode",{parentName:"a"},"crawler.addRequests()"))," function is called, or if ",(0,s.kt)("inlineCode",{parentName:"p"},"requests")," parameter (representing the initial requests) of the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/class/BasicCrawler#run"},(0,s.kt)("inlineCode",{parentName:"a"},"crawler.run()"))," function is provided."),(0,s.kt)("p",null,"If both ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestList"},(0,s.kt)("inlineCode",{parentName:"a"},"requestList"))," and ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#requestQueue"},(0,s.kt)("inlineCode",{parentName:"a"},"requestQueue"))," options are used, the instance first processes URLs from the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/RequestList"},"RequestList")," and automatically enqueues all of them to the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/RequestQueue"},"RequestQueue")," before it starts their processing. This ensures that a single URL is not crawled multiple times."),(0,s.kt)("p",null,"The crawler finishes if there are no more ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/Request"},"Request")," objects to crawl."),(0,s.kt)("p",null,"New requests are only dispatched when there is enough free CPU and memory available, using the functionality provided by the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/AutoscaledPool"},"AutoscaledPool")," class. All ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/AutoscaledPool"},"AutoscaledPool")," configuration options can be passed to the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/basic-crawler/interface/BasicCrawlerOptions#autoscaledPoolOptions"},(0,s.kt)("inlineCode",{parentName:"a"},"autoscaledPoolOptions"))," parameter of the ",(0,s.kt)("inlineCode",{parentName:"p"},"BasicCrawler")," constructor. For user convenience, the ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/interface/AutoscaledPoolOptions#minConcurrency"},(0,s.kt)("inlineCode",{parentName:"a"},"minConcurrency"))," and ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/interface/AutoscaledPoolOptions#maxConcurrency"},(0,s.kt)("inlineCode",{parentName:"a"},"maxConcurrency"))," options of the underlying ",(0,s.kt)("a",{parentName:"p",href:"https://crawlee.dev/api/core/class/AutoscaledPool"},"AutoscaledPool")," constructor are available directly in the ",(0,s.kt)("inlineCode",{parentName:"p"},"BasicCrawler")," constructor."),(0,s.kt)("h2",{id:"example-usage"},"Example usage"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BasicCrawler, Dataset } from 'crawlee';\n\n// Create a crawler instance\nconst crawler = new BasicCrawler({\n    async requestHandler({ request, sendRequest }) {\n        // 'request' contains an instance of the Request class\n        // Here we simply fetch the HTML of the page and store it to a dataset\n        const { body } = await sendRequest({\n            url: request.url,\n            method: request.method,\n            body: request.payload,\n            headers: request.headers,\n        });\n\n        await Dataset.pushData({\n            url: request.url,\n            html: body,\n        })\n    },\n});\n\n// Enqueue the initial requests and run the crawler\nawait crawler.run([\n    'http://www.example.com/page-1',\n    'http://www.example.com/page-2',\n]);\n")))}u.isMDXComponent=!0}}]);